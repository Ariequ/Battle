/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hero.Message.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCCharacterInfoMsg : TBase
  {
    private Hero.Message.Auto.SystemInfo _failSystemInfo;
    private string _passportId;
    private int _charId;
    private string _name;
    private sbyte _sex;
    private short _level;
    private int _exp;
    private sbyte _vipLevel;
    private int _rechargeAmount;
    private List<sbyte> _byteCounterList;
    private List<int> _intCounterList;
    private List<List<int>> _cycleCounterList;
    private List<bool> _flagList;

    public Hero.Message.Auto.SystemInfo FailSystemInfo
    {
      get
      {
        return _failSystemInfo;
      }
      set
      {
        __isset.failSystemInfo = true;
        this._failSystemInfo = value;
      }
    }

    public string PassportId
    {
      get
      {
        return _passportId;
      }
      set
      {
        __isset.passportId = true;
        this._passportId = value;
      }
    }

    public int CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public sbyte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public short Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public sbyte VipLevel
    {
      get
      {
        return _vipLevel;
      }
      set
      {
        __isset.vipLevel = true;
        this._vipLevel = value;
      }
    }

    public int RechargeAmount
    {
      get
      {
        return _rechargeAmount;
      }
      set
      {
        __isset.rechargeAmount = true;
        this._rechargeAmount = value;
      }
    }

    public List<sbyte> ByteCounterList
    {
      get
      {
        return _byteCounterList;
      }
      set
      {
        __isset.byteCounterList = true;
        this._byteCounterList = value;
      }
    }

    public List<int> IntCounterList
    {
      get
      {
        return _intCounterList;
      }
      set
      {
        __isset.intCounterList = true;
        this._intCounterList = value;
      }
    }

    public List<List<int>> CycleCounterList
    {
      get
      {
        return _cycleCounterList;
      }
      set
      {
        __isset.cycleCounterList = true;
        this._cycleCounterList = value;
      }
    }

    public List<bool> FlagList
    {
      get
      {
        return _flagList;
      }
      set
      {
        __isset.flagList = true;
        this._flagList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool failSystemInfo;
      public bool passportId;
      public bool charId;
      public bool name;
      public bool sex;
      public bool level;
      public bool exp;
      public bool vipLevel;
      public bool rechargeAmount;
      public bool byteCounterList;
      public bool intCounterList;
      public bool cycleCounterList;
      public bool flagList;
    }

    public SCCharacterInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Struct) {
              FailSystemInfo = new Hero.Message.Auto.SystemInfo();
              FailSystemInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              PassportId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              CharId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I16) {
              Level = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 71:
            if (field.Type == TType.Byte) {
              VipLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 72:
            if (field.Type == TType.I32) {
              RechargeAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.List) {
              {
                ByteCounterList = new List<sbyte>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  sbyte _elem2 = 0;
                  _elem2 = iprot.ReadByte();
                  ByteCounterList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.List) {
              {
                IntCounterList = new List<int>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  int _elem5 = 0;
                  _elem5 = iprot.ReadI32();
                  IntCounterList.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.List) {
              {
                CycleCounterList = new List<List<int>>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  List<int> _elem8 = new List<int>();
                  {
                    _elem8 = new List<int>();
                    TList _list9 = iprot.ReadListBegin();
                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                    {
                      int _elem11 = 0;
                      _elem11 = iprot.ReadI32();
                      _elem8.Add(_elem11);
                    }
                    iprot.ReadListEnd();
                  }
                  CycleCounterList.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.List) {
              {
                FlagList = new List<bool>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  bool _elem14 = false;
                  _elem14 = iprot.ReadBool();
                  FlagList.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCCharacterInfoMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (FailSystemInfo != null && __isset.failSystemInfo) {
        field.Name = "failSystemInfo";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        FailSystemInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PassportId != null && __isset.passportId) {
        field.Name = "passportId";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PassportId);
        oprot.WriteFieldEnd();
      }
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CharId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I16;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipLevel) {
        field.Name = "vipLevel";
        field.Type = TType.Byte;
        field.ID = 71;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(VipLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.rechargeAmount) {
        field.Name = "rechargeAmount";
        field.Type = TType.I32;
        field.ID = 72;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RechargeAmount);
        oprot.WriteFieldEnd();
      }
      if (ByteCounterList != null && __isset.byteCounterList) {
        field.Name = "byteCounterList";
        field.Type = TType.List;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, ByteCounterList.Count));
          foreach (sbyte _iter15 in ByteCounterList)
          {
            oprot.WriteByte(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IntCounterList != null && __isset.intCounterList) {
        field.Name = "intCounterList";
        field.Type = TType.List;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, IntCounterList.Count));
          foreach (int _iter16 in IntCounterList)
          {
            oprot.WriteI32(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CycleCounterList != null && __isset.cycleCounterList) {
        field.Name = "cycleCounterList";
        field.Type = TType.List;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, CycleCounterList.Count));
          foreach (List<int> _iter17 in CycleCounterList)
          {
            {
              oprot.WriteListBegin(new TList(TType.I32, _iter17.Count));
              foreach (int _iter18 in _iter17)
              {
                oprot.WriteI32(_iter18);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FlagList != null && __isset.flagList) {
        field.Name = "flagList";
        field.Type = TType.List;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Bool, FlagList.Count));
          foreach (bool _iter19 in FlagList)
          {
            oprot.WriteBool(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCCharacterInfoMsg(");
      sb.Append("FailSystemInfo: ");
      sb.Append(FailSystemInfo== null ? "<null>" : FailSystemInfo.ToString());
      sb.Append(",PassportId: ");
      sb.Append(PassportId);
      sb.Append(",CharId: ");
      sb.Append(CharId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Sex: ");
      sb.Append(Sex);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",VipLevel: ");
      sb.Append(VipLevel);
      sb.Append(",RechargeAmount: ");
      sb.Append(RechargeAmount);
      sb.Append(",ByteCounterList: ");
      sb.Append(ByteCounterList);
      sb.Append(",IntCounterList: ");
      sb.Append(IntCounterList);
      sb.Append(",CycleCounterList: ");
      sb.Append(CycleCounterList);
      sb.Append(",FlagList: ");
      sb.Append(FlagList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
