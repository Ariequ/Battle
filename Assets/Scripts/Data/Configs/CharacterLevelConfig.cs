/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hero.Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CharacterLevelConfig : TBase
  {
    private short _level;
    private int _levelUpExp;
    private sbyte _weaponMastery;
    private sbyte _helmetMastery;
    private sbyte _chestMastery;
    private sbyte _bootMastery;
    private short _maxEnergy;
    private sbyte _moveSpeed;

    public short Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int LevelUpExp
    {
      get
      {
        return _levelUpExp;
      }
      set
      {
        __isset.levelUpExp = true;
        this._levelUpExp = value;
      }
    }

    public sbyte WeaponMastery
    {
      get
      {
        return _weaponMastery;
      }
      set
      {
        __isset.weaponMastery = true;
        this._weaponMastery = value;
      }
    }

    public sbyte HelmetMastery
    {
      get
      {
        return _helmetMastery;
      }
      set
      {
        __isset.helmetMastery = true;
        this._helmetMastery = value;
      }
    }

    public sbyte ChestMastery
    {
      get
      {
        return _chestMastery;
      }
      set
      {
        __isset.chestMastery = true;
        this._chestMastery = value;
      }
    }

    public sbyte BootMastery
    {
      get
      {
        return _bootMastery;
      }
      set
      {
        __isset.bootMastery = true;
        this._bootMastery = value;
      }
    }

    public short MaxEnergy
    {
      get
      {
        return _maxEnergy;
      }
      set
      {
        __isset.maxEnergy = true;
        this._maxEnergy = value;
      }
    }

    public sbyte MoveSpeed
    {
      get
      {
        return _moveSpeed;
      }
      set
      {
        __isset.moveSpeed = true;
        this._moveSpeed = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool level;
      public bool levelUpExp;
      public bool weaponMastery;
      public bool helmetMastery;
      public bool chestMastery;
      public bool bootMastery;
      public bool maxEnergy;
      public bool moveSpeed;
    }

    public CharacterLevelConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I16) {
              Level = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              LevelUpExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Byte) {
              WeaponMastery = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Byte) {
              HelmetMastery = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              ChestMastery = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Byte) {
              BootMastery = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I16) {
              MaxEnergy = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.Byte) {
              MoveSpeed = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CharacterLevelConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.levelUpExp) {
        field.Name = "levelUpExp";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LevelUpExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.weaponMastery) {
        field.Name = "weaponMastery";
        field.Type = TType.Byte;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(WeaponMastery);
        oprot.WriteFieldEnd();
      }
      if (__isset.helmetMastery) {
        field.Name = "helmetMastery";
        field.Type = TType.Byte;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(HelmetMastery);
        oprot.WriteFieldEnd();
      }
      if (__isset.chestMastery) {
        field.Name = "chestMastery";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ChestMastery);
        oprot.WriteFieldEnd();
      }
      if (__isset.bootMastery) {
        field.Name = "bootMastery";
        field.Type = TType.Byte;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BootMastery);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxEnergy) {
        field.Name = "maxEnergy";
        field.Type = TType.I16;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxEnergy);
        oprot.WriteFieldEnd();
      }
      if (__isset.moveSpeed) {
        field.Name = "moveSpeed";
        field.Type = TType.Byte;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MoveSpeed);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CharacterLevelConfig(");
      sb.Append("Level: ");
      sb.Append(Level);
      sb.Append(",LevelUpExp: ");
      sb.Append(LevelUpExp);
      sb.Append(",WeaponMastery: ");
      sb.Append(WeaponMastery);
      sb.Append(",HelmetMastery: ");
      sb.Append(HelmetMastery);
      sb.Append(",ChestMastery: ");
      sb.Append(ChestMastery);
      sb.Append(",BootMastery: ");
      sb.Append(BootMastery);
      sb.Append(",MaxEnergy: ");
      sb.Append(MaxEnergy);
      sb.Append(",MoveSpeed: ");
      sb.Append(MoveSpeed);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
