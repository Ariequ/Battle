/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hero.Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SoldierConfig : TBase
  {
    private int _itemId;
    private int _groupId;
    private int _soldierNameMessageId;
    private sbyte _bodyType;
    private sbyte _maxCount;
    private sbyte _star;
    private sbyte _quality;
    private sbyte _initLevel;
    private short _maxLevel;
    private short _initAtt;
    private int _addAtt;
    private short _initDef;
    private int _addDef;
    private short _initHp;
    private int _addHp;
    private short _initLuck;
    private int _addLuck;
    private short _initAvo;
    private short _attInterval;
    private short _attRange;
    private int _costGold;
    private int _upgradeCardId;
    private sbyte _camp;
    private int _advanceCostGold;
    private string _mode;
    private string _head;
    private sbyte _decompSoulMin;
    private sbyte _decompSoulMax;
    private int _worthExp;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public int GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public int SoldierNameMessageId
    {
      get
      {
        return _soldierNameMessageId;
      }
      set
      {
        __isset.soldierNameMessageId = true;
        this._soldierNameMessageId = value;
      }
    }

    public sbyte BodyType
    {
      get
      {
        return _bodyType;
      }
      set
      {
        __isset.bodyType = true;
        this._bodyType = value;
      }
    }

    public sbyte MaxCount
    {
      get
      {
        return _maxCount;
      }
      set
      {
        __isset.maxCount = true;
        this._maxCount = value;
      }
    }

    public sbyte Star
    {
      get
      {
        return _star;
      }
      set
      {
        __isset.star = true;
        this._star = value;
      }
    }

    public sbyte Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public sbyte InitLevel
    {
      get
      {
        return _initLevel;
      }
      set
      {
        __isset.initLevel = true;
        this._initLevel = value;
      }
    }

    public short MaxLevel
    {
      get
      {
        return _maxLevel;
      }
      set
      {
        __isset.maxLevel = true;
        this._maxLevel = value;
      }
    }

    public short InitAtt
    {
      get
      {
        return _initAtt;
      }
      set
      {
        __isset.initAtt = true;
        this._initAtt = value;
      }
    }

    public int AddAtt
    {
      get
      {
        return _addAtt;
      }
      set
      {
        __isset.addAtt = true;
        this._addAtt = value;
      }
    }

    public short InitDef
    {
      get
      {
        return _initDef;
      }
      set
      {
        __isset.initDef = true;
        this._initDef = value;
      }
    }

    public int AddDef
    {
      get
      {
        return _addDef;
      }
      set
      {
        __isset.addDef = true;
        this._addDef = value;
      }
    }

    public short InitHp
    {
      get
      {
        return _initHp;
      }
      set
      {
        __isset.initHp = true;
        this._initHp = value;
      }
    }

    public int AddHp
    {
      get
      {
        return _addHp;
      }
      set
      {
        __isset.addHp = true;
        this._addHp = value;
      }
    }

    public short InitLuck
    {
      get
      {
        return _initLuck;
      }
      set
      {
        __isset.initLuck = true;
        this._initLuck = value;
      }
    }

    public int AddLuck
    {
      get
      {
        return _addLuck;
      }
      set
      {
        __isset.addLuck = true;
        this._addLuck = value;
      }
    }

    public short InitAvo
    {
      get
      {
        return _initAvo;
      }
      set
      {
        __isset.initAvo = true;
        this._initAvo = value;
      }
    }

    public short AttInterval
    {
      get
      {
        return _attInterval;
      }
      set
      {
        __isset.attInterval = true;
        this._attInterval = value;
      }
    }

    public short AttRange
    {
      get
      {
        return _attRange;
      }
      set
      {
        __isset.attRange = true;
        this._attRange = value;
      }
    }

    public int CostGold
    {
      get
      {
        return _costGold;
      }
      set
      {
        __isset.costGold = true;
        this._costGold = value;
      }
    }

    public int UpgradeCardId
    {
      get
      {
        return _upgradeCardId;
      }
      set
      {
        __isset.upgradeCardId = true;
        this._upgradeCardId = value;
      }
    }

    public sbyte Camp
    {
      get
      {
        return _camp;
      }
      set
      {
        __isset.camp = true;
        this._camp = value;
      }
    }

    public int AdvanceCostGold
    {
      get
      {
        return _advanceCostGold;
      }
      set
      {
        __isset.advanceCostGold = true;
        this._advanceCostGold = value;
      }
    }

    public string Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public string Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public sbyte DecompSoulMin
    {
      get
      {
        return _decompSoulMin;
      }
      set
      {
        __isset.decompSoulMin = true;
        this._decompSoulMin = value;
      }
    }

    public sbyte DecompSoulMax
    {
      get
      {
        return _decompSoulMax;
      }
      set
      {
        __isset.decompSoulMax = true;
        this._decompSoulMax = value;
      }
    }

    public int WorthExp
    {
      get
      {
        return _worthExp;
      }
      set
      {
        __isset.worthExp = true;
        this._worthExp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool groupId;
      public bool soldierNameMessageId;
      public bool bodyType;
      public bool maxCount;
      public bool star;
      public bool quality;
      public bool initLevel;
      public bool maxLevel;
      public bool initAtt;
      public bool addAtt;
      public bool initDef;
      public bool addDef;
      public bool initHp;
      public bool addHp;
      public bool initLuck;
      public bool addLuck;
      public bool initAvo;
      public bool attInterval;
      public bool attRange;
      public bool costGold;
      public bool upgradeCardId;
      public bool camp;
      public bool advanceCostGold;
      public bool mode;
      public bool head;
      public bool decompSoulMin;
      public bool decompSoulMax;
      public bool worthExp;
    }

    public SoldierConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              GroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              SoldierNameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Byte) {
              BodyType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              MaxCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Byte) {
              Star = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Byte) {
              Quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.Byte) {
              InitLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I16) {
              MaxLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I16) {
              InitAtt = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              AddAtt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I16) {
              InitDef = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              AddDef = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I16) {
              InitHp = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              AddHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.I16) {
              InitLuck = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.I32) {
              AddLuck = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 180:
            if (field.Type == TType.I16) {
              InitAvo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 190:
            if (field.Type == TType.I16) {
              AttInterval = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 200:
            if (field.Type == TType.I16) {
              AttRange = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 210:
            if (field.Type == TType.I32) {
              CostGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 220:
            if (field.Type == TType.I32) {
              UpgradeCardId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 230:
            if (field.Type == TType.Byte) {
              Camp = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 240:
            if (field.Type == TType.I32) {
              AdvanceCostGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 250:
            if (field.Type == TType.String) {
              Mode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 260:
            if (field.Type == TType.String) {
              Head = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 270:
            if (field.Type == TType.Byte) {
              DecompSoulMin = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 280:
            if (field.Type == TType.Byte) {
              DecompSoulMax = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 290:
            if (field.Type == TType.I32) {
              WorthExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SoldierConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.groupId) {
        field.Name = "groupId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GroupId);
        oprot.WriteFieldEnd();
      }
      if (__isset.soldierNameMessageId) {
        field.Name = "soldierNameMessageId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SoldierNameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.bodyType) {
        field.Name = "bodyType";
        field.Type = TType.Byte;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BodyType);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxCount) {
        field.Name = "maxCount";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MaxCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.star) {
        field.Name = "star";
        field.Type = TType.Byte;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Star);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Byte;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.initLevel) {
        field.Name = "initLevel";
        field.Type = TType.Byte;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(InitLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxLevel) {
        field.Name = "maxLevel";
        field.Type = TType.I16;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.initAtt) {
        field.Name = "initAtt";
        field.Type = TType.I16;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(InitAtt);
        oprot.WriteFieldEnd();
      }
      if (__isset.addAtt) {
        field.Name = "addAtt";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddAtt);
        oprot.WriteFieldEnd();
      }
      if (__isset.initDef) {
        field.Name = "initDef";
        field.Type = TType.I16;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(InitDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.addDef) {
        field.Name = "addDef";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.initHp) {
        field.Name = "initHp";
        field.Type = TType.I16;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(InitHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.addHp) {
        field.Name = "addHp";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.initLuck) {
        field.Name = "initLuck";
        field.Type = TType.I16;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(InitLuck);
        oprot.WriteFieldEnd();
      }
      if (__isset.addLuck) {
        field.Name = "addLuck";
        field.Type = TType.I32;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddLuck);
        oprot.WriteFieldEnd();
      }
      if (__isset.initAvo) {
        field.Name = "initAvo";
        field.Type = TType.I16;
        field.ID = 180;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(InitAvo);
        oprot.WriteFieldEnd();
      }
      if (__isset.attInterval) {
        field.Name = "attInterval";
        field.Type = TType.I16;
        field.ID = 190;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(AttInterval);
        oprot.WriteFieldEnd();
      }
      if (__isset.attRange) {
        field.Name = "attRange";
        field.Type = TType.I16;
        field.ID = 200;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(AttRange);
        oprot.WriteFieldEnd();
      }
      if (__isset.costGold) {
        field.Name = "costGold";
        field.Type = TType.I32;
        field.ID = 210;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostGold);
        oprot.WriteFieldEnd();
      }
      if (__isset.upgradeCardId) {
        field.Name = "upgradeCardId";
        field.Type = TType.I32;
        field.ID = 220;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UpgradeCardId);
        oprot.WriteFieldEnd();
      }
      if (__isset.camp) {
        field.Name = "camp";
        field.Type = TType.Byte;
        field.ID = 230;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Camp);
        oprot.WriteFieldEnd();
      }
      if (__isset.advanceCostGold) {
        field.Name = "advanceCostGold";
        field.Type = TType.I32;
        field.ID = 240;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AdvanceCostGold);
        oprot.WriteFieldEnd();
      }
      if (Mode != null && __isset.mode) {
        field.Name = "mode";
        field.Type = TType.String;
        field.ID = 250;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mode);
        oprot.WriteFieldEnd();
      }
      if (Head != null && __isset.head) {
        field.Name = "head";
        field.Type = TType.String;
        field.ID = 260;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Head);
        oprot.WriteFieldEnd();
      }
      if (__isset.decompSoulMin) {
        field.Name = "decompSoulMin";
        field.Type = TType.Byte;
        field.ID = 270;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(DecompSoulMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.decompSoulMax) {
        field.Name = "decompSoulMax";
        field.Type = TType.Byte;
        field.ID = 280;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(DecompSoulMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.worthExp) {
        field.Name = "worthExp";
        field.Type = TType.I32;
        field.ID = 290;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WorthExp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SoldierConfig(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",GroupId: ");
      sb.Append(GroupId);
      sb.Append(",SoldierNameMessageId: ");
      sb.Append(SoldierNameMessageId);
      sb.Append(",BodyType: ");
      sb.Append(BodyType);
      sb.Append(",MaxCount: ");
      sb.Append(MaxCount);
      sb.Append(",Star: ");
      sb.Append(Star);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",InitLevel: ");
      sb.Append(InitLevel);
      sb.Append(",MaxLevel: ");
      sb.Append(MaxLevel);
      sb.Append(",InitAtt: ");
      sb.Append(InitAtt);
      sb.Append(",AddAtt: ");
      sb.Append(AddAtt);
      sb.Append(",InitDef: ");
      sb.Append(InitDef);
      sb.Append(",AddDef: ");
      sb.Append(AddDef);
      sb.Append(",InitHp: ");
      sb.Append(InitHp);
      sb.Append(",AddHp: ");
      sb.Append(AddHp);
      sb.Append(",InitLuck: ");
      sb.Append(InitLuck);
      sb.Append(",AddLuck: ");
      sb.Append(AddLuck);
      sb.Append(",InitAvo: ");
      sb.Append(InitAvo);
      sb.Append(",AttInterval: ");
      sb.Append(AttInterval);
      sb.Append(",AttRange: ");
      sb.Append(AttRange);
      sb.Append(",CostGold: ");
      sb.Append(CostGold);
      sb.Append(",UpgradeCardId: ");
      sb.Append(UpgradeCardId);
      sb.Append(",Camp: ");
      sb.Append(Camp);
      sb.Append(",AdvanceCostGold: ");
      sb.Append(AdvanceCostGold);
      sb.Append(",Mode: ");
      sb.Append(Mode);
      sb.Append(",Head: ");
      sb.Append(Head);
      sb.Append(",DecompSoulMin: ");
      sb.Append(DecompSoulMin);
      sb.Append(",DecompSoulMax: ");
      sb.Append(DecompSoulMax);
      sb.Append(",WorthExp: ");
      sb.Append(WorthExp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
