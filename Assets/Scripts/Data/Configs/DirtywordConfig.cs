/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hero.Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DirtywordConfig : TBase
  {
    private THashSet<string> _wordSet;

    public THashSet<string> WordSet
    {
      get
      {
        return _wordSet;
      }
      set
      {
        __isset.wordSet = true;
        this._wordSet = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool wordSet;
    }

    public DirtywordConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                WordSet = new THashSet<string>();
                TSet _set77 = iprot.ReadSetBegin();
                for( int _i78 = 0; _i78 < _set77.Count; ++_i78)
                {
                  string _elem79 = null;
                  _elem79 = iprot.ReadString();
                  WordSet.Add(_elem79);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DirtywordConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (WordSet != null && __isset.wordSet) {
        field.Name = "wordSet";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, WordSet.Count));
          foreach (string _iter80 in WordSet)
          {
            oprot.WriteString(_iter80);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DirtywordConfig(");
      sb.Append("WordSet: ");
      sb.Append(WordSet);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
