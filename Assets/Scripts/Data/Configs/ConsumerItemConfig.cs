/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hero.Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ConsumerItemConfig : TBase
  {
    private int _itemId;
    private int _nameMessageId;
    private int _descMessageId;
    private sbyte _type;
    private sbyte _quality;
    private string _icon;
    private short _maxCount;
    private int _putOnLimitId;
    private int _putOnFuncId;
    private int _takeOffLimitId;
    private int _takeOffFuncId;
    private int _useLimitId;
    private int _useFuncId;
    private short _attribute;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public sbyte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public sbyte Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public short MaxCount
    {
      get
      {
        return _maxCount;
      }
      set
      {
        __isset.maxCount = true;
        this._maxCount = value;
      }
    }

    public int PutOnLimitId
    {
      get
      {
        return _putOnLimitId;
      }
      set
      {
        __isset.putOnLimitId = true;
        this._putOnLimitId = value;
      }
    }

    public int PutOnFuncId
    {
      get
      {
        return _putOnFuncId;
      }
      set
      {
        __isset.putOnFuncId = true;
        this._putOnFuncId = value;
      }
    }

    public int TakeOffLimitId
    {
      get
      {
        return _takeOffLimitId;
      }
      set
      {
        __isset.takeOffLimitId = true;
        this._takeOffLimitId = value;
      }
    }

    public int TakeOffFuncId
    {
      get
      {
        return _takeOffFuncId;
      }
      set
      {
        __isset.takeOffFuncId = true;
        this._takeOffFuncId = value;
      }
    }

    public int UseLimitId
    {
      get
      {
        return _useLimitId;
      }
      set
      {
        __isset.useLimitId = true;
        this._useLimitId = value;
      }
    }

    public int UseFuncId
    {
      get
      {
        return _useFuncId;
      }
      set
      {
        __isset.useFuncId = true;
        this._useFuncId = value;
      }
    }

    public short Attribute
    {
      get
      {
        return _attribute;
      }
      set
      {
        __isset.attribute = true;
        this._attribute = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool nameMessageId;
      public bool descMessageId;
      public bool type;
      public bool quality;
      public bool icon;
      public bool maxCount;
      public bool putOnLimitId;
      public bool putOnFuncId;
      public bool takeOffLimitId;
      public bool takeOffFuncId;
      public bool useLimitId;
      public bool useFuncId;
      public bool attribute;
    }

    public ConsumerItemConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              Quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.String) {
              Icon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I16) {
              MaxCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              PutOnLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              PutOnFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              TakeOffLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              TakeOffFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              UseLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              UseFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I16) {
              Attribute = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ConsumerItemConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Quality);
        oprot.WriteFieldEnd();
      }
      if (Icon != null && __isset.icon) {
        field.Name = "icon";
        field.Type = TType.String;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxCount) {
        field.Name = "maxCount";
        field.Type = TType.I16;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.putOnLimitId) {
        field.Name = "putOnLimitId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PutOnLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.putOnFuncId) {
        field.Name = "putOnFuncId";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PutOnFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.takeOffLimitId) {
        field.Name = "takeOffLimitId";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TakeOffLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.takeOffFuncId) {
        field.Name = "takeOffFuncId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TakeOffFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.useLimitId) {
        field.Name = "useLimitId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UseLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.useFuncId) {
        field.Name = "useFuncId";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UseFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.attribute) {
        field.Name = "attribute";
        field.Type = TType.I16;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Attribute);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ConsumerItemConfig(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",MaxCount: ");
      sb.Append(MaxCount);
      sb.Append(",PutOnLimitId: ");
      sb.Append(PutOnLimitId);
      sb.Append(",PutOnFuncId: ");
      sb.Append(PutOnFuncId);
      sb.Append(",TakeOffLimitId: ");
      sb.Append(TakeOffLimitId);
      sb.Append(",TakeOffFuncId: ");
      sb.Append(TakeOffFuncId);
      sb.Append(",UseLimitId: ");
      sb.Append(UseLimitId);
      sb.Append(",UseFuncId: ");
      sb.Append(UseFuncId);
      sb.Append(",Attribute: ");
      sb.Append(Attribute);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
